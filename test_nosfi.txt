
build/libMoon_Test_NoSFI.so:     file format elf64-x86-64


Disassembly of section .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    $0x8,%rsp
    1008:	48 8b 05 b1 2f 00 00 	mov    0x2fb1(%rip),%rax        # 3fc0 <__gmon_start__>
    100f:	48 85 c0             	test   %rax,%rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	callq  *%rax
    1016:	48 83 c4 08          	add    $0x8,%rsp
    101a:	c3                   	retq   

Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:	ff 35 e2 2f 00 00    	pushq  0x2fe2(%rip)        # 4008 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	ff 25 e4 2f 00 00    	jmpq   *0x2fe4(%rip)        # 4010 <_GLOBAL_OFFSET_TABLE_+0x10>
    102c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001030 <abort@plt>:
    1030:	ff 25 e2 2f 00 00    	jmpq   *0x2fe2(%rip)        # 4018 <abort@GLIBC_2.2.5>
    1036:	68 00 00 00 00       	pushq  $0x0
    103b:	e9 e0 ff ff ff       	jmpq   1020 <.plt>

0000000000001040 <puts@plt>:
    1040:	ff 25 da 2f 00 00    	jmpq   *0x2fda(%rip)        # 4020 <puts@GLIBC_2.2.5>
    1046:	68 01 00 00 00       	pushq  $0x1
    104b:	e9 d0 ff ff ff       	jmpq   1020 <.plt>

0000000000001050 <printf@plt>:
    1050:	ff 25 d2 2f 00 00    	jmpq   *0x2fd2(%rip)        # 4028 <printf@GLIBC_2.2.5>
    1056:	68 02 00 00 00       	pushq  $0x2
    105b:	e9 c0 ff ff ff       	jmpq   1020 <.plt>

0000000000001060 <fprintf@plt>:
    1060:	ff 25 ca 2f 00 00    	jmpq   *0x2fca(%rip)        # 4030 <fprintf@GLIBC_2.2.5>
    1066:	68 03 00 00 00       	pushq  $0x3
    106b:	e9 b0 ff ff ff       	jmpq   1020 <.plt>

0000000000001070 <malloc@plt>:
    1070:	ff 25 c2 2f 00 00    	jmpq   *0x2fc2(%rip)        # 4038 <malloc@GLIBC_2.2.5>
    1076:	68 04 00 00 00       	pushq  $0x4
    107b:	e9 a0 ff ff ff       	jmpq   1020 <.plt>

0000000000001080 <__isoc99_scanf@plt>:
    1080:	ff 25 ba 2f 00 00    	jmpq   *0x2fba(%rip)        # 4040 <__isoc99_scanf@GLIBC_2.7>
    1086:	68 05 00 00 00       	pushq  $0x5
    108b:	e9 90 ff ff ff       	jmpq   1020 <.plt>

Disassembly of section .plt.got:

0000000000001090 <__cxa_finalize@plt>:
    1090:	ff 25 5a 2f 00 00    	jmpq   *0x2f5a(%rip)        # 3ff0 <__cxa_finalize@GLIBC_2.2.5>
    1096:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

00000000000010a0 <deregister_tm_clones>:
    10a0:	48 8d 3d a9 2f 00 00 	lea    0x2fa9(%rip),%rdi        # 4050 <completed.8060>
    10a7:	48 8d 05 a2 2f 00 00 	lea    0x2fa2(%rip),%rax        # 4050 <completed.8060>
    10ae:	48 39 f8             	cmp    %rdi,%rax
    10b1:	74 15                	je     10c8 <deregister_tm_clones+0x28>
    10b3:	48 8b 05 fe 2e 00 00 	mov    0x2efe(%rip),%rax        # 3fb8 <_ITM_deregisterTMCloneTable>
    10ba:	48 85 c0             	test   %rax,%rax
    10bd:	74 09                	je     10c8 <deregister_tm_clones+0x28>
    10bf:	ff e0                	jmpq   *%rax
    10c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    10c8:	c3                   	retq   
    10c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000010d0 <register_tm_clones>:
    10d0:	48 8d 3d 79 2f 00 00 	lea    0x2f79(%rip),%rdi        # 4050 <completed.8060>
    10d7:	48 8d 35 72 2f 00 00 	lea    0x2f72(%rip),%rsi        # 4050 <completed.8060>
    10de:	48 29 fe             	sub    %rdi,%rsi
    10e1:	48 89 f0             	mov    %rsi,%rax
    10e4:	48 c1 ee 3f          	shr    $0x3f,%rsi
    10e8:	48 c1 f8 03          	sar    $0x3,%rax
    10ec:	48 01 c6             	add    %rax,%rsi
    10ef:	48 d1 fe             	sar    %rsi
    10f2:	74 14                	je     1108 <register_tm_clones+0x38>
    10f4:	48 8b 05 dd 2e 00 00 	mov    0x2edd(%rip),%rax        # 3fd8 <_ITM_registerTMCloneTable>
    10fb:	48 85 c0             	test   %rax,%rax
    10fe:	74 08                	je     1108 <register_tm_clones+0x38>
    1100:	ff e0                	jmpq   *%rax
    1102:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1108:	c3                   	retq   
    1109:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001110 <__do_global_dtors_aux>:
    1110:	f3 0f 1e fa          	endbr64 
    1114:	80 3d 35 2f 00 00 00 	cmpb   $0x0,0x2f35(%rip)        # 4050 <completed.8060>
    111b:	75 2b                	jne    1148 <__do_global_dtors_aux+0x38>
    111d:	55                   	push   %rbp
    111e:	48 83 3d ca 2e 00 00 	cmpq   $0x0,0x2eca(%rip)        # 3ff0 <__cxa_finalize@GLIBC_2.2.5>
    1125:	00 
    1126:	48 89 e5             	mov    %rsp,%rbp
    1129:	74 0c                	je     1137 <__do_global_dtors_aux+0x27>
    112b:	48 8b 3d 16 2f 00 00 	mov    0x2f16(%rip),%rdi        # 4048 <__dso_handle>
    1132:	e8 59 ff ff ff       	callq  1090 <__cxa_finalize@plt>
    1137:	e8 64 ff ff ff       	callq  10a0 <deregister_tm_clones>
    113c:	c6 05 0d 2f 00 00 01 	movb   $0x1,0x2f0d(%rip)        # 4050 <completed.8060>
    1143:	5d                   	pop    %rbp
    1144:	c3                   	retq   
    1145:	0f 1f 00             	nopl   (%rax)
    1148:	c3                   	retq   
    1149:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001150 <frame_dummy>:
    1150:	f3 0f 1e fa          	endbr64 
    1154:	e9 77 ff ff ff       	jmpq   10d0 <register_tm_clones>
    1159:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001160 <main>:
#include <stdlib.h>

unsigned char g = '\0';

int main(int argc, const char *argv[])
{
    1160:	55                   	push   %rbp
    1161:	48 89 e5             	mov    %rsp,%rbp
    1164:	48 83 ec 60          	sub    $0x60,%rsp
    unsigned char *h = malloc(sizeof(unsigned char) * 64);
    1168:	b8 40 00 00 00       	mov    $0x40,%eax
    116d:	89 7d d4             	mov    %edi,-0x2c(%rbp)
    1170:	48 89 c7             	mov    %rax,%rdi
    1173:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
    1177:	e8 f4 fe ff ff       	callq  1070 <malloc@plt>
    117c:	48 8b 0d 4d 2e 00 00 	mov    0x2e4d(%rip),%rcx        # 3fd0 <g@@Base-0x81>
    unsigned char s;
    printf("[Moon_Test] h = %p, &s = %p, &g = %p\n", h, &s, &g);
    1183:	48 8d 3d 76 0e 00 00 	lea    0xe76(%rip),%rdi        # 2000 <_fini+0xd1c>
    118a:	48 89 c6             	mov    %rax,%rsi
    118d:	48 8d 55 ff          	lea    -0x1(%rbp),%rdx
    1191:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    1195:	b0 00                	mov    $0x0,%al
    1197:	e8 b4 fe ff ff       	callq  1050 <printf@plt>
    119c:	48 8b 0d 2d 2e 00 00 	mov    0x2e2d(%rip),%rcx        # 3fd0 <g@@Base-0x81>

    unsigned char *choices[3] = {&s, h, &g};
    11a3:	48 8d 55 ff          	lea    -0x1(%rbp),%rdx
    11a7:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
    11ab:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    11af:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    11b3:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)

    printf("Pick a base (0 = stack, 1 = heap, 2 = data): ");
    11b7:	48 8d 3d 68 0e 00 00 	lea    0xe68(%rip),%rdi        # 2026 <_fini+0xd42>
    11be:	89 45 bc             	mov    %eax,-0x44(%rbp)
    11c1:	b0 00                	mov    $0x0,%al
    11c3:	e8 88 fe ff ff       	callq  1050 <printf@plt>
    int i;
    scanf("%d", &i);
    11c8:	48 8d 3d 85 0e 00 00 	lea    0xe85(%rip),%rdi        # 2054 <_fini+0xd70>
    11cf:	48 8d 75 dc          	lea    -0x24(%rbp),%rsi
    11d3:	89 45 b8             	mov    %eax,-0x48(%rbp)
    11d6:	b0 00                	mov    $0x0,%al
    11d8:	e8 a3 fe ff ff       	callq  1080 <__isoc99_scanf@plt>
    printf("Input an offset: ");
    11dd:	48 8d 3d 73 0e 00 00 	lea    0xe73(%rip),%rdi        # 2057 <_fini+0xd73>
    11e4:	89 45 b4             	mov    %eax,-0x4c(%rbp)
    11e7:	b0 00                	mov    $0x0,%al
    11e9:	e8 62 fe ff ff       	callq  1050 <printf@plt>
    int off;
    scanf("%x", &off);
    11ee:	48 8d 3d 74 0e 00 00 	lea    0xe74(%rip),%rdi        # 2069 <_fini+0xd85>
    11f5:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
    11f9:	89 45 b0             	mov    %eax,-0x50(%rbp)
    11fc:	b0 00                	mov    $0x0,%al
    11fe:	e8 7d fe ff ff       	callq  1080 <__isoc99_scanf@plt>

    printf("Attempt to write %p + (%#x)...", choices[i], off);
    1203:	44 8b 45 dc          	mov    -0x24(%rbp),%r8d
    1207:	49 63 c8             	movslq %r8d,%rcx
    120a:	48 8b 74 cd e0       	mov    -0x20(%rbp,%rcx,8),%rsi
    120f:	8b 55 d8             	mov    -0x28(%rbp),%edx
    1212:	48 8d 3d 53 0e 00 00 	lea    0xe53(%rip),%rdi        # 206c <_fini+0xd88>
    1219:	89 45 ac             	mov    %eax,-0x54(%rbp)
    121c:	b0 00                	mov    $0x0,%al
    121e:	e8 2d fe ff ff       	callq  1050 <printf@plt>
    choices[i][off] = 42;
    1223:	8b 55 dc             	mov    -0x24(%rbp),%edx
    1226:	48 63 ca             	movslq %edx,%rcx
    1229:	48 8b 4c cd e0       	mov    -0x20(%rbp,%rcx,8),%rcx
    122e:	8b 55 d8             	mov    -0x28(%rbp),%edx
    1231:	48 63 f2             	movslq %edx,%rsi
    1234:	c6 04 31 2a          	movb   $0x2a,(%rcx,%rsi,1)
    printf(" done\n");
    1238:	48 8d 3d 79 0e 00 00 	lea    0xe79(%rip),%rdi        # 20b8 <_fini+0xdd4>
    123f:	89 45 a8             	mov    %eax,-0x58(%rbp)
    1242:	e8 f9 fd ff ff       	callq  1040 <puts@plt>
    1247:	31 d2                	xor    %edx,%edx
    1249:	89 45 a4             	mov    %eax,-0x5c(%rbp)

    return 0;
    124c:	89 d0                	mov    %edx,%eax
    124e:	48 83 c4 60          	add    $0x60,%rsp
    1252:	5d                   	pop    %rbp
    1253:	c3                   	retq   
    1254:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    125b:	00 00 00 
    125e:	66 90                	xchg   %ax,%ax

0000000000001260 <SwordHolder_CheckWriteMemory>:
uintptr_t SwordHolder_MainPrefix;
#define SwordHolder_MainAlign (32ul << 30ul)
uintptr_t SwordHolder_ExtraLow, SwordHolder_ExtraHigh;

void SwordHolder_CheckWriteMemory(uintptr_t p)
{
    1260:	55                   	push   %rbp
    1261:	48 89 e5             	mov    %rsp,%rbp
    1264:	48 83 ec 10          	sub    $0x10,%rsp
    1268:	48 8b 05 59 2d 00 00 	mov    0x2d59(%rip),%rax        # 3fc8 <SwordHolder_MainPrefix@@Base-0x90>
    if (likely((p ^ SwordHolder_MainPrefix) < SwordHolder_MainAlign)) {
    126f:	48 89 f9             	mov    %rdi,%rcx
    1272:	48 33 08             	xor    (%rax),%rcx
    1275:	48 b8 00 00 00 00 08 	movabs $0x800000000,%rax
    127c:	00 00 00 
    127f:	48 39 c1             	cmp    %rax,%rcx
    1282:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1286:	0f 82 51 00 00 00    	jb     12dd <SwordHolder_CheckWriteMemory+0x7d>
    128c:	48 8b 05 4d 2d 00 00 	mov    0x2d4d(%rip),%rax        # 3fe0 <SwordHolder_ExtraHigh@@Base-0x80>
    1293:	48 8b 0d 4e 2d 00 00 	mov    0x2d4e(%rip),%rcx        # 3fe8 <SwordHolder_ExtraLow@@Base-0x80>
    129a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
        return;
    }
    if (p >= SwordHolder_ExtraLow && p < SwordHolder_ExtraHigh)
    129e:	48 39 11             	cmp    %rdx,(%rcx)
    12a1:	40 0f 96 c6          	setbe  %sil
    12a5:	48 39 10             	cmp    %rdx,(%rax)
    12a8:	40 0f 97 c7          	seta   %dil
    12ac:	40 20 fe             	and    %dil,%sil
    12af:	40 f6 c6 01          	test   $0x1,%sil
    12b3:	0f 85 24 00 00 00    	jne    12dd <SwordHolder_CheckWriteMemory+0x7d>
    12b9:	48 8b 05 38 2d 00 00 	mov    0x2d38(%rip),%rax        # 3ff8 <stderr@GLIBC_2.2.5>
    {
        return;
    }
    fprintf(stderr, "[SwordHolder] invalid pointer writing at %p\n", (void *)p);
    12c0:	48 8b 38             	mov    (%rax),%rdi
    12c3:	48 8d 35 c1 0d 00 00 	lea    0xdc1(%rip),%rsi        # 208b <_fini+0xda7>
    12ca:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    12ce:	b0 00                	mov    $0x0,%al
    12d0:	e8 8b fd ff ff       	callq  1060 <fprintf@plt>
    12d5:	89 45 f4             	mov    %eax,-0xc(%rbp)
    abort();
    12d8:	e8 53 fd ff ff       	callq  1030 <abort@plt>
    12dd:	48 83 c4 10          	add    $0x10,%rsp
    12e1:	5d                   	pop    %rbp
    12e2:	c3                   	retq   

Disassembly of section .fini:

00000000000012e4 <_fini>:
    12e4:	f3 0f 1e fa          	endbr64 
    12e8:	48 83 ec 08          	sub    $0x8,%rsp
    12ec:	48 83 c4 08          	add    $0x8,%rsp
    12f0:	c3                   	retq   
